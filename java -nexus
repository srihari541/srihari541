pipeline {
	agent any
	environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "18.117.78.216:8081"
        NEXUS_REPOSITORY = "jenkins-nexus"
        NEXUS_CREDENTIAL_ID = "nexus-jenkins"
    }
	stages {
		stage('Checkout') {
			steps {
			 //   805e3194-ca18-4b5d-8bd9-ea2b57f716b8
				git credentialsId: 'f6b6245f-9806-4e47-94e7-fcdd86192ca7', url: 'https://gitlab.mouritech.com/mt-digital-core-platform/java/log4j.git'
			}
		}
		stage('Test') {
			steps {
				  sh 'mvn test'
            }
		}
		stage('Build') {
			steps {
				  sh 'mvn clean install'
            }
		}
		stage('Static Code Analysis') {
	       steps {
	           script {
                        def scannerHome = tool 'sonar_scanner';
                             withSonarQubeEnv('mt-sonarqube') {
                             sh 'mvn sonar:sonar -Dsonar.projectKey=MT-Java.Log4j -Dsonar.host.url=http://3.139.78.108:9000  -Dsonar.login=590cbbe21754721eb8590b283ec8ea1a942f63f4 -Dsonar.projectName=MT-Java.Log4j'
                        }
                }
            }
        }
        stage('Publish'){
            steps{
                sh 'mvn deploy -s settings.xml'
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            //version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } 
                }
            }
        }
    }
	    
}
